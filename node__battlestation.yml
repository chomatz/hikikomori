---

- name: deploy base desktop configuration
  ansible.builtin.import_playbook: node__desktop.yml

- name: deploy custom desktop configuration
  hosts: "{{ nodes }}"

  pre_tasks:

    - name: source pre-playbook tasks
      ansible.builtin.include_tasks:
        file: task__pre.yml

  tasks:

    - name: ensure tasks run only on selected os releases
      block:

        - name: deploy neovim
          ansible.builtin.include_role:
            name: cli_customization
            tasks_from: neovim_deploy.yml
          vars:
            nvim_dir_home: "~/.config/nvim"
            nvim_dir_config: "configs"
            nvim_dir_plugin: "plugins"
            nvim_dir_ftype: "after/ftplugin"
            nvim_config_generator: "/etc/profile.d/neovim_config_generator.sh"
            nvim_config_location:
              - "{{ nvim_dir_home }}/{{ nvim_dir_ftype }}"
              - "{{ nvim_dir_home }}/lua/{{ nvim_dir_config }}"
              - "{{ nvim_dir_home }}/lua/{{ nvim_dir_plugin }}"
            nvim_config_file:
              - name: "{{ nvim_dir_home }}/init.lua"
                data: |
                  -- load defaults
                  require("{{ nvim_dir_config }}.default")

                  -- load plugin manager
                  require("{{ nvim_dir_config }}.lazy")

                  -- load plugins
                  require("{{ nvim_dir_config }}.bufferline")
                  require("{{ nvim_dir_config }}.lualine")
              - name: "{{ nvim_dir_home }}/lua/{{ nvim_dir_config }}/default.lua"
                data: |
                  -- background setting(s)
                  vim.api.nvim_set_hl(0, "Normal", {bg = "none"})
                  vim.api.nvim_set_hl(0, "NormalFloat", { bg = "none" })

                  -- indicator setting(s)
                  vim.opt.cursorcolumn = true
                  vim.opt.cursorline = true
                  vim.opt.number = true
                  vim.opt.list = true
                  vim.opt.listchars = { tab = "| " }

                  -- fold setting(s)
                  vim.opt.foldmethod = "indent"
                  vim.opt.foldlevelstart = 9999

                  -- keymap setting(s)
                  -- toggle visual aids
                  vim.keymap.set("n", "<tab>", ":set number! <bar> :set list!<CR>")
                  -- toggle folds
                  vim.keymap.set("n", "<space>", "za")
                  -- move to prev buffer
                  vim.keymap.set("n", "<c-right>", ":BufferLineCycleNext<CR>")
                  -- move to next buffer
                  vim.keymap.set("n", "<c-left>", ":BufferLineCyclePrev<CR>")
                  -- split - move to left
                  vim.keymap.set("n", "<c-s-left>", "<c-w>h")
                  -- split - move to right
                  vim.keymap.set("n", "<c-s-right>", "<c-w>l")
                  -- split - move to top
                  vim.keymap.set("n", "<c-s-up>", "<c-w>k")
                  -- split - move to bottom
                  vim.keymap.set("n", "<c-s-down>", "<c-w>j")

                  -- mouse setting(s)
                  vim.opt.mouse = ""

                  -- split setting(s)
                  vim.opt.splitbelow = true
                  vim.opt.splitright = true

                  -- tab setting(s)
                  vim.opt.tabstop = 4
                  vim.opt.softtabstop = 0
                  vim.opt.shiftwidth = 4
                  vim.opt.expandtab = false
              - name: "{{ nvim_dir_home }}/lua/{{ nvim_dir_config }}/lazy.lua"
                data: |
                  -- Bootstrap lazy.nvim
                  local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
                  if not (vim.uv or vim.loop).fs_stat(lazypath) then
                      local lazyrepo = "https://github.com/folke/lazy.nvim.git"
                      local out = vim.fn.system({ "git", "clone", "--filter=blob:none", "--branch=stable", lazyrepo, lazypath })
                      if vim.v.shell_error ~= 0 then
                          vim.api.nvim_echo({
                              { "Failed to clone lazy.nvim:\n", "ErrorMsg" },
                              { out, "WarningMsg" },
                              { "\nPress any key to exit..." },
                          }, true, {})
                          vim.fn.getchar()
                          os.exit(1)
                      end
                  end

                  vim.opt.rtp:prepend(lazypath)

                  -- Make sure to setup mapleader and maplocalleader before
                  -- loading lazy.nvim so that mappings are correct.
                  -- This is also a good place to setup other settings (vim.opt)
                  vim.g.mapleader = " "
                  vim.g.maplocalleader = "\\\"

                  -- Setup lazy.nvim
                  require("lazy").setup({
                      spec = {
                          -- import your plugins
                          { import = "plugins" },
                      },
                      -- Configure any other settings here. See the documentation for more details.
                      -- colorscheme that will be used when installing plugins.
                      install = { colorscheme = { "habamax" } },
                      -- automatically check for plugin updates
                      checker = { enabled = true },
                  })
              - name: "{{ nvim_dir_home }}/lua/{{ nvim_dir_config }}/bufferline.lua"
                data: |
                  vim.opt.termguicolors = true

                  require("bufferline").setup{
                      options = {
                          mode = "buffers",
                          numbers = "buffer_id",
                          left_mouse_command = false,
                          right_mouse_command = false,
                          indicator = { style = "underline" },
                          show_buffer_icons = false,
                          show_buffer_close_icons = false
                      },
                      highlights = {
                          buffer_selected = {
                              fg = "#00afd7",
                              italic = false
                          },
                          numbers_selected = {
                              fg = "#00afd7",
                              italic = false
                          }
                      }
                  }
              - name: "{{ nvim_dir_home }}/lua/{{ nvim_dir_config }}/lualine.lua"
                data: |
                  local color = {
                      t33  = "#0087ff",
                      t37  = "#00afaf",
                      t38  = "#00afd7",
                      t73  = "#5fafaf",
                      t98  = "#875fd7",
                      t166 = "#d75f00",
                      t255 = "#eeeeee"
                  }
                  local basic = {
                      normal = {
                          a = { fg = color.t73 },
                          b = { fg = color.t38 },
                          c = { fg = color.t255 }
                      },
                      insert = { a = { fg = color.t37 } },
                      visual = { a = { fg = color.t98 } },
                      replace = { a = { fg = color.t166 } },
                      inactive = {
                          a = { fg = color.t255 },
                          b = { fg = color.t255 },
                          c = { fg = color.t255 }
                      }
                  }
                  require("lualine").setup {
                      options = {
                          icons_enabled = true,
                          theme = basic,
                          component_separators = { left = " ", right = " " },
                          section_separators = { left = " ", right = " " },
                          disabled_filetypes = {
                              statusline = {},
                              winbar = {},
                          },
                          ignore_focus = {},
                          always_divide_middle = true,
                          always_show_tabline = true,
                          globalstatus = false,
                          refresh = {
                              statusline = 100,
                              tabline = 100,
                              winbar = 100,
                          }
                      },
                      sections = {
                          lualine_a = {"mode"},
                          lualine_b = {"branch", "diff", "diagnostics"},
                          lualine_c = {"filename"},
                          lualine_x = {"encoding", "fileformat", "filetype"},
                          lualine_y = {"progress"},
                          lualine_z = {"location"}
                      },
                      inactive_sections = {
                          lualine_a = {},
                          lualine_b = {},
                          lualine_c = {"filename"},
                          lualine_x = {"location"},
                          lualine_y = {},
                          lualine_z = {}
                      },
                      tabline = {},
                      winbar = {},
                      inactive_winbar = {},
                      extensions = {}
                  }
              - name: "{{ nvim_dir_home }}/lua/{{ nvim_dir_plugin }}/default.lua"
                data: |
                  return {
                      -- bufferline
                      {"akinsho/bufferline.nvim", version = "*", dependencies = "nvim-tree/nvim-web-devicons"},
                      -- lualine
                      {"nvim-lualine/lualine.nvim", dependencies = "nvim-tree/nvim-web-devicons"}
                      -- vim-fugitive
                      { "tpope/vim-fugitive" }
                  }
              - name: "{{ nvim_dir_home }}/{{ nvim_dir_ftype }}/markdown.lua"
                data: |
                  vim.opt_local.tabstop = 2
                  vim.opt_local.softtabstop = 2
                  vim.opt_local.shiftwidth = 2
                  vim.opt_local.expandtab = true
              - name: "{{ nvim_dir_home }}/{{ nvim_dir_ftype }}/yaml.lua"
                data: |
                  vim.opt_local.tabstop = 2
                  vim.opt_local.softtabstop = 2
                  vim.opt_local.shiftwidth = 2
                  vim.opt_local.expandtab = true

        - name: deploy tmux
          ansible.builtin.include_role:
            name: cli_customization
            tasks_from: tmux_deploy.yml
          vars:
            tmux_config_generator: "/etc/profile.d/tmux_config_generator.sh"
            tmux_custom_config: |
              # statusline defaults
              set -g status-interval 1
              set -g status-position top
              set -g default-terminal tmux-256color
              set -g status-fg color255
              set -g status-style bg=default

              # window index
              set -g base-index 1
              set -g renumber-windows on

              # pane border
              set -g pane-border-style fg=color255
              set -g pane-active-border-style fg=color98

              # left area
              set -g status-left-length 100
              set -g status-left "#[fg=color98]  #S "
              set -ag status-left "#[fg=color31] 󰍹 #H "
              set -ag status-left "#[fg=color255]  "

              # right area
              set -g status-right-length 100
              set -g status-right "#[fg=color37] #[fg=color255]%a %b %d %Y "
              set -ag status-right "#[fg=color37] #[fg=color255]%H:%M"

              # middle area
              set -g window-status-format "#[fg=color255]#I:#W"
              set -g window-status-current-format "#[fg=color166]#I:#W"

        - name: deploy bash
          ansible.builtin.include_role:
            name: cli_customization
            tasks_from: bash_deploy.yml
          vars:
            bash_config_generator: "/etc/profile.d/bash_config_generator.sh"
            bash_custom_config: |
              #-----autodelete_lines_below-----#
              git_show_branch(){
                  git_branch=\$(git branch --show-current 2> /dev/null)
                  if [ "\$git_branch" != "" ]; then
                      echo "\$(tput setaf 31)  \$git_branch"
                  fi
              }

              session_check_jobs(){
                  jobs_running=\$(jobs | wc -l)
                  if [ "\$jobs_running" -ge 1 ]; then
                      echo "\$(tput setaf 166)  \$jobs_running"
                  fi
              }

              session_check_user(){
                  if [ "\$UID" -eq 0 ]; then
                      color=196
                  elif [ "\$UID" -ge 1 ] && [ "\$UID" -lt 1000 ]; then
                      color=166
                  else
                      color=98
                  fi
                  echo "\$(tput setaf \$color)  \u"
              }

              export PS1="\$(session_check_user)\\\$(git_show_branch)\\\$(tput setaf 37)  \w\\\$(session_check_jobs)\$(tput sgr0)\n "

        - name: ensure tasks run only on selected os releases
          block:

            - name: configure anydesk repository
              ansible.builtin.yum_repository:
                name: anydesk
                description: AnyDesk Fedora - stable
                file: fedora-anydesk
                baseurl: http://rpm.anydesk.com/rhel/8/$basearch/
                gpgkey: https://keys.anydesk.com/repos/RPM-GPG-KEY
                gpgcheck: true
                repo_gpgcheck: true
                metadata_expire: 21600

            - name: install anydesk
              ansible.builtin.package:
                name: anydesk
                state: present

            - name: enable spotify repository
              ansible.builtin.command:
                cmd: dnf config-manager --add-repo=https://negativo17.org/repos/fedora-spotify.repo
              when:
              - ansible_distribution_major_version < "41"

            - name: enable spotify repository
              ansible.builtin.command:
                cmd: dnf config-manager addrepo --overwrite --from-repofile=https://negativo17.org/repos/fedora-spotify.repo
              when:
              - ansible_distribution_major_version >= "41"

            - name: install spotify
              ansible.builtin.package:
                name: spotify-client
                state: present

            - name: install viber
              ansible.builtin.package:
                name: https://download.cdn.viber.com/desktop/Linux/viber.rpm
                state: present
                disable_gpg_check: true

            - name: install desktop application(s)
              ansible.builtin.package:
                name:
                  - electrum
                  - firefox
                  - "@LibreOffice"
                state: present

            - name: install steam
              ansible.builtin.include_role:
                name: linux_gaming
                tasks_from: steam_install.yml

            - name: allow running steam via sudo
              ansible.builtin.include_role:
                name: linux_gaming
                tasks_from: steam_sudo.yml

            - name: install xone dongle/gamepad driver
              ansible.builtin.include_role:
                name: linux_gaming
                tasks_from: xone_driver.yml

            - name: install qemu-kvm
              ansible.builtin.include_role:
                name: linux_virtualization
                tasks_from: kvm.yml

            - name: configure kvm bridge on default network interface
              ansible.builtin.include_role:
                name: linux_virtualization
                tasks_from: default_bridge.yml
              vars:
                enable_network_bridge: true

          when: ansible_distribution == "Fedora"

      when: >
        (ansible_distribution == "Archlinux" and ansible_distribution_release == "holo") or
        ansible_distribution == "Fedora"

  post_tasks:

    - name: source post-playbook tasks
      ansible.builtin.include_tasks:
        file: task__post.yml

...
